import groovy.json.JsonOutput
import groovy.json.JsonSlurperClassic
import org.codehaus.groovy.runtime.DefaultGroovyMethods
import org.codehaus.groovy.util.StringUtil
import org.gradle.api.internal.tasks.TaskExecuter
import org.gradle.api.internal.tasks.TaskStateInternal

import java.nio.charset.Charset
import java.text.SimpleDateFormat

final String VERSION_NAME = "3.0.6"

println("\r\n************************\r\n"
        + "** APPLYON: ${projectDir.absolutePath}\r\n"
        + "** NAME   : vcsLib gradle script (Using the local svn / git command)\r\n"
        + "** VERSION: $VERSION_NAME\r\n"
        + "** NOTE   : only support master branch on git\r\n"
        + "** Instructions and source code can be accessed at the following address:\r\n"
        + "**   github -> https://github.com/NingOpenSource/vcsLib\r\n"
        + "**   gitee  -> https://gitee.com/NingOpenSource/vcsLib\r\n"
        + "************************\r\n")
/**
 ************* vcsLib gradle脚本版（使用本地的svn/git命令）*************************
 * 请注意，git上的maven不支持分支和标签，可以修改此文件获取支持
 */
/**
 *
 */
final class App {
    static boolean isDebug = false
    static final String confFileName = "vcsLib.json"
    static final String mavenConfFileName = "vcsLib.publish.json"

    /**
     * 软件存储主目录
     */
    static final File vcsLibHome = new File(System.getProperty("user.home"), ".vcsLib")
    static final String defaultCharset = Charset.defaultCharset()
    static {
        if (vcsLibHome.exists() && vcsLibHome.isFile()) {
            vcsLibHome.delete()
        }
        if (!vcsLibHome.exists()) {
            vcsLibHome.mkdir()
        }
    }

    static void logD(String text) {
        println("vcsLib: $text")
    }

    static void logE(String text) {
        System.err.println("vcsLib: $text")
    }

    static ArrayList<String> exec(String tag, String cmd) {
        return exec(tag, null, cmd)
    }

    static ArrayList<String> exec(String tag, File dir, String cmd) {
        final String charsetOut = "utf-8"//用于校正windows操作系统下出现的文件名中文乱码
        logD("$tag ${new String(cmd.getBytes(charsetOut), Charset.defaultCharset())}")
        ArrayList<String> result = new ArrayList<>()
        String[] envp = ["LC_MESSAGES=en_US"]//设置svn输出英文，中文输出在某些特殊操作系统（或IDE）下会出现乱码
        Process process = Runtime.getRuntime().exec(cmd, envp, dir)
        String lineText = null
        BufferedReader reader = process.in.newReader()
        while ((lineText = reader.readLine()) != null) {
            result.add(lineText)
            lineText = new String(lineText.getBytes(charsetOut), Charset.defaultCharset())
            logD("$tag $lineText")
        }
        reader.close()
        BufferedReader errorReader = process.errorStream.newReader()
        while ((lineText = errorReader.readLine()) != null) {
            lineText = new String(lineText.getBytes(charsetOut), Charset.defaultCharset())
            logD("$tag $lineText")
        }
        errorReader.close()
        reader = null
        errorReader = null
        lineText = null
        envp = null
        process = null
        return result
    }
}

class RepoConfig {
    String uri = ""
    String user = ""
    String passwd = ""

    static File outDir(String uri) {
        if (App.isDebug) {
            return new File(App.vcsLibHome,
                    "debug." + URLEncoder.encode(uri, "utf-8"))
        } else {
            return new File(App.vcsLibHome,
                    URLEncoder.encode(uri, "utf-8"))
        }
    }
    /**
     * merge rootDir&projectDir
     * @param rootDir
     * @param projectDir
     * @return
     */
    static HashMap<String, RepoConfig> loadMergeConfs(File rootDir, File projectDir) {
        if (rootDir.absolutePath.equals(projectDir.absolutePath)) {
            return loadConfs(new File(rootDir, App.confFileName))
        }
        HashMap<String, RepoConfig> rootConfMap = loadConfs(new File(rootDir, App.confFileName))
        HashMap<String, RepoConfig> projectConfMap = loadConfs(new File(projectDir, App.confFileName))
        for (String key : projectConfMap.keySet()) {
            RepoConfig rc = projectConfMap.get(key)
            if (rootConfMap.containsKey(key)) {
                if (rc != null && !rc.uri.isEmpty() && !rc.user.isEmpty() && !rc.passwd.isEmpty())
                    rootConfMap.put(key, rc)
            } else {
                rootConfMap.put(key, rc)
            }
        }
        return rootConfMap
    }

    private static HashMap<String, RepoConfig> loadConfs(File file) {
        if (file.exists()) {
            HashMap result = new HashMap<String, RepoConfig>()
            ArrayList<HashMap> repoConfs = new JsonSlurperClassic().parse(file)
            repoConfs.each { conf ->
                RepoConfig repoConfig = new RepoConfig()
                repoConfig.user = conf.user
                repoConfig.passwd = conf.passwd
                repoConfig.uri = conf.uri
                if (!repoConfig.uri.isEmpty()) {
                    result.put(repoConfig.uri, repoConfig)
                }
            }
            return result
        } else {
            file.createNewFile()
            file.write(JsonOutput.prettyPrint(JsonOutput.toJson([[uri: "", user: "", passwd: "",]])))
            return new HashMap<String, RepoConfig>()
        }
    }
}


abstract class Repo {
    final RepoConfig repoConfig
    final File outDir
    final File updateTagFile
    /**
     * 用于限制频繁更新maven仓库的时间，在1小时以内不再进行重复的更新操作
     */
    final long limitTime = 1000 * 60 * 60 * 1

    Repo(RepoConfig repoConfig) {
        this.repoConfig = repoConfig
        outDir = RepoConfig.outDir(repoConfig.uri)
        updateTagFile = new File(outDir.parent, ".${outDir.name}")
    }

    abstract boolean hasCheckout()

    abstract void update()

    abstract void upload()

    /**
     * 可防止重复更新操作，加快编译速度
     */
    void updateWithLimit() {
        if (!outDir.exists() && updateTagFile.exists()) {
            updateTagFile.delete()
        }
        if (!updateTagFile.exists()) {
            updateTagFile.createNewFile()
            update()
        } else if (System.currentTimeMillis() - updateTagFile.lastModified() > limitTime) {
            updateTagFile.setLastModified(System.currentTimeMillis())//更新最后修改的时间
            update()
        } else {
            App.logD("repo(${repoConfig.uri}) has updated!(limit time is 1h, you can update force by 'gradle vcsLibUpdate')")
        }
    }

}

class RepoGit extends Repo {

    RepoGit(RepoConfig repoConfig) {
        super(repoConfig)
    }
    /**
     * 将密码与uri组合
     * @return
     */
    private String wrapperUri() {
        if (repoConfig.user.isEmpty() || repoConfig.passwd.isEmpty()) {
//一般可能时公开的git仓库，或者本地文件夹的绝对路径或者形如file://的uri路径,或者配置好公钥的ssh地址
            return repoConfig.uri
        }
        if (repoConfig.uri.contains("https://") || repoConfig.uri.contains("http://")) {
            String[] tempUriBlocks = repoConfig.uri.split("//")
            if (tempUriBlocks[1].contains("@")) {
//这是一个已经包含用户名密码的链接,例如：https://username:password@git.oschina.net/wdm/familycloud.git
                return repoConfig.uri
            } else {
                return "${tempUriBlocks[0]}//${URLEncoder.encode(repoConfig.user, "utf-8")}:${URLEncoder.encode(repoConfig.passwd, "utf-8")}@${tempUriBlocks[1]}"
            }
        } else {
            throw new Exception("SSH uri is not support!")
        }
    }

    @Override
    boolean hasCheckout() {
        File dir = new File(outDir, ".git")
        return dir.exists() && dir.isDirectory()
    }

    @Override
    void update() {
        if (hasCheckout()) {
            App.logD("git pull")
            App.exec("git pull ->", outDir,
                    "git pull")
        } else {
            App.logD("git clone")
            if (outDir.exists()) {
                outDir.delete()
            }
            outDir.mkdir()
            App.exec("git clone ->", "git clone --depth=1 ${wrapperUri()} \"${outDir.absolutePath}\"")
        }
    }

    @Override
    void upload() {
        App.logD("git upload")
        App.exec("git config user.email ->", outDir,
                "git config user.email ${repoConfig.user}")
        App.exec("git config user.name ->", outDir,
                "git config user.name ${repoConfig.user}")
        App.exec("git add * ->", outDir,
                "git add *")
        App.exec("git add * ->", outDir,
                "git add *")
        String time = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date())
        App.exec("git commit -a->", outDir,
                "git commit -a -m \"commit from vcsLib plugin at $time\"")
        App.exec("git push->", outDir,
                "git push")
    }
}
/**
 * 參考：https://www.cnblogs.com/hk315523748/p/6178273.html
 */
class RepoSvn extends Repo {

    RepoSvn(RepoConfig repoConfig) {
        super(repoConfig)
    }

    @Override
    boolean hasCheckout() {
        File dir = new File(outDir, ".svn")
        return dir.exists() && dir.isDirectory()
    }

    @Override
    void update() {
        if (hasCheckout()) {
            App.logD("svn update")
            svnStatus()
            App.exec("svn update ->",
                    "svn update ${outDir.absolutePath} --username ${repoConfig.user} --password ${repoConfig.passwd}")
        } else {
            App.logD("svn checkout")
            if (outDir.exists()) {
                outDir.delete()
            }
            outDir.mkdir()
            App.exec("svn checkout ->", "svn checkout ${repoConfig.uri} ${outDir.absolutePath} --username ${repoConfig.user} --password ${repoConfig.passwd}")
//            App.exec("svn checkout ->", "svn checkout \"${repoConfig.uri}\" \"${outDir.absolutePath}\" --username ${repoConfig.user} --password ${repoConfig.passwd}")
        }
    }

    void svnStatus() {
        App.exec("svn status ->", outDir, "svn status").each {
            if (it.startsWith("?")) {//The new file
                String path = it.substring(1, it.length()).trim()
                App.exec("svn add ->", outDir, "svn add \"$path\"")
            } else if (it.startsWith("!")) {//Deleted Files
                String path = it.substring(1, it.length()).trim()
                App.exec("svn delete ->", outDir, "svn delete \"$path\"")
            }
        }
    }

    @Override
    void upload() {
        App.logD("svn upload")
        svnStatus()
        String time = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date())
        App.exec("svn commit ->", outDir, "svn commit -m \"commit from vcsLib plugin at $time\"")
    }
}

class RepoHelper {
    final RepoConfig conf

    RepoHelper(RepoConfig conf) {
        this.conf = conf
    }

    boolean isSVN(String uri) {
        if (uri == null) return false
        if (uri.isEmpty()) return false
        if (uri.startsWith("svn://") || uri.startsWith("svn+ssh://")) return true
        return false
    }


    boolean isGIT(String uri) {
        if (uri == null) return false
        if (uri.isEmpty()) return false
        if (uri.endsWith(".git") && (
                uri.startsWith("https://")
                        || uri.startsWith("http://")
                        || uri.contains("@"))) return true
        return false
    }

    Repo connectRepo() {
        if (conf.uri.isEmpty()) {
            App.logD("Please config \"uri\":\"${conf.uri}\" in ${App.confFileName}")
            return null
        }
        if (isSVN(conf.uri)) {
            return new RepoSvn(conf)
        }
        if (isGIT(conf.uri)) {
            return new RepoGit(conf)
        }
        return null
    }

}

class MavenConf {
    String mavenId = ""
    ArrayList<RepoConfig> repoConfigs = new ArrayList<>()

    static void createConfFile(File file) {
        if (!file.exists()) {
            file.createNewFile()
            file.write(JsonOutput.prettyPrint(JsonOutput.toJson(
                    [mavenId: "org.vcslib:demo:0.0.1", repos: [[uri: "", user: "", passwd: ""]]])))
        }
    }

    static MavenConf from(File file) {
        if (file.exists()) {
            MavenConf mavenConf = new MavenConf()
            HashMap<String, Object> map = new JsonSlurperClassic().parse(file)
            mavenConf.mavenId = map.mavenId
            mavenConf.repoConfigs = map.repos as ArrayList<RepoConfig>
            return mavenConf
        } else {
            return null
        }
    }
}

/**
 * *******************************************************************************************************
 * 开始执行初始化配置
 */
try {
    if (vcsLibDebugMode) {
        App.isDebug = true
        App.logE("debug mode is opened...")
    }
} catch (Throwable _) {
}
final HashMap<StringUtil, Repo> repoConfigs = RepoConfig.loadMergeConfs(rootDir, projectDir)
final MavenConf mavenConf = MavenConf.from(new File(projectDir, App.mavenConfFileName))
App.logD("vcsLibUpdateLimit is starting...")
repoConfigs.values().each {//更新用于依赖的maven仓库
    Repo repo = new RepoHelper(it).connectRepo()
    if (repo != null) {
        repo.updateWithLimit()
    }
}
App.logD("vcsLibUpdateLimit is completed")
buildscript.repositories {
    for (String key : repoConfigs.keySet()) {
        maven { url RepoConfig.outDir(key).toPath() }
    }
}
repositories {
    for (String key : repoConfigs.keySet()) {
        maven { url RepoConfig.outDir(key).toPath() }
    }
}
/**
 * 配置UploadArchives
 * @param mavenId
 * @param repoConfig
 */
void configUploadArchives(String mavenId, RepoConfig repoConfig) {
    String[] mavenIdInfo = mavenId.split(":")
    if (mavenIdInfo.length != 3 || mavenIdInfo[0].length() == 0 || mavenIdInfo[1].length() == 0 || mavenIdInfo[2].length() == 0) {
        App.logE("config maven: mavenId=$mavenId is wrong!")
        return
    }
    String mGroup = mavenIdInfo[0]
    String mArtifactId = mavenIdInfo[1]
    String mVersion = mavenIdInfo[2]
    if (!plugins.hasPlugin('maven'))
        apply plugin: 'maven'
    group mGroup
    version mVersion
    if (plugins.hasPlugin("kotlin-android")) {//适用于带有kotlin语言的android库发布
        if (!plugins.hasPlugin('org.jetbrains.dokka')) {//加入kotlin的doc生成工具
            /**
             buildscript {repositories {google()
             jcenter()}dependencies {classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.18"}}*/
            try {
				apply plugin: 'org.jetbrains.dokka'
			} catch(Throwable _){
				App.logE("please config:\r\n"
					+"  buildscript {\r\n"
					+"    repositories {\r\n"
					+"      jcenter()\r\n"
					+"    }\r\n"
					+"    dependencies {\r\n"
					+"      classpath 'org.jetbrains.dokka:dokka-gradle-plugin:0.9.18'\r\n"
					+"    }\r\n"
					+"  }\r\n")
			}
        }
        if (tasks.findByName('generateSourcesJar') == null)
            task generateSourcesJar(type: Jar) {
                group = 'jar'
                from android.sourceSets.main.java.srcDirs
                archiveClassifier = 'sources'
            }
        if (tasks.findByName('javadoc') == null)
            task javadoc(type: Javadoc) {
                source = android.sourceSets.main.java.srcDirs
                classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
            }

        if (tasks.findByName('dokkaJavadoc') == null)
            task dokkaJavadoc(type: dokka.getClass()) {
                outputFormat = "javadoc"
                outputDirectory = javadoc.destinationDir
            }

        if (tasks.findByName('generateJavadoc') == null)
            task generateJavadoc(type: Jar, dependsOn: dokkaJavadoc) {
                group = 'jar'
                archiveClassifier = 'javadoc'
                from javadoc.destinationDir
            }
        artifacts {
            archives generateJavadoc
            archives generateSourcesJar
        }
    } else {
        if (plugins.hasPlugin("com.android.library")) {//适用于不带有kotlin语言的标准android库发布
            if (tasks.findByName('sourcesJar') == null)
                task sourcesJar(type: Jar) {
                    from android.sourceSets.main.java.srcDirs
                    archiveClassifier = 'sources'
                }
            if (tasks.findByName('javadoc') == null)
                task javadoc(type: Javadoc) {
                    if (JavaVersion.current().isJava9Compatible()) {
                        options.addBooleanOption('html5', true)
                    }
                    options.encoding = "UTF-8"
                    source = android.sourceSets.main.java.srcDirs
                    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
                }
        } else if (plugins.hasPlugin("java-library")) {//适用于带有标准java语言jar库发布
            if (tasks.findByName('sourcesJar') == null)
                task sourcesJar(type: Jar) {
                    from sourceSets.main.java.srcDirs
                    archiveClassifier = 'sources'
                }
            if (tasks.findByName('javadoc') == null)
                task javadoc(type: Javadoc) {
                    if (JavaVersion.current().isJava9Compatible()) {
                        options.addBooleanOption('html5', true)
                    }
                    options.encoding = "UTF-8"
                    source = sourceSets.main.java.srcDirs
                    classpath += project.files(getBootClasspath().join(File.pathSeparator))
                }
        }
        if (tasks.findByName('javadocJar') == null && project.properties.containsKey('javadoc')) {
            task javadocJar(type: Jar, dependsOn: javadoc) {
                archiveClassifier = 'javadoc'
                from javadoc.destinationDir
            }
        }
        if (tasks.findByName('javadocJar') != null && tasks.findByName('sourcesJar') != null) {
            artifacts {
                archives javadocJar
                archives sourcesJar
            }
        }
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
            options.addStringOption('encoding', 'UTF-8')
            options.addStringOption('charSet', 'UTF-8')
        }
    }
    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: RepoConfig.outDir(repoConfig.uri).toURI().toString())
                pom.version = mVersion
                pom.artifactId = mArtifactId
            }
        }
    }
}

/**
 * 创建发布maven的任务
 */
void configVcsLibPublishTask(MavenConf mavenConf, int index) {
    if (mavenConf.repoConfigs.size() > index) {
        uploadArchives.dependsOn(tasks.findByName("vcsLibPublishCheck_\$$index"))
        if (index == 0) {
            tasks.findByName("vcsLibPublish_\$$index").dependsOn(uploadArchives)
        }
        tasks.findByName("vcsLibPublish_\$$index").doFirst {
            int nextIndex = index + 1
            if (mavenConf.repoConfigs.size() > nextIndex) {
                uploadArchives.dependsOn.remove(tasks.findByName("vcsLibPublishCheck_\$$index"))
                configVcsLibPublishTask(nextIndex)
                mustRunAfter(tasks.findByName("vcsLibPublishCheck_\$$nextIndex"))
            }
        }
    }
}
/**
 * **********************************************************************************************************
 * 开始创建任务
 */
/**
 * 无限制的更新maven仓库
 */
task vcsLibUpdate(group: "vcsLib") {
    doFirst {
        App.logD("$name is starting...")
        repoConfigs.values().each {
            Repo repo = new RepoHelper(it).connectRepo()
            if (repo != null) {
                repo.update()
            }
        }
        App.logD("$name is completed")
    }
}

/**
 * 有限制的更新maven仓库，加快编译速度，一般过滤掉1小时以内的更新任务
 */
task vcsLibUpdateLimit(group: "vcsLib") {
    doFirst {
        App.logD("$name is starting...")
        repoConfigs.values().each {
            Repo repo = new RepoHelper(it).connectRepo()
            if (repo != null) {
                repo.updateWithLimit()
            }
        }
        App.logD("$name is completed")
    }
}
if (mavenConf == null) {
    /**
     *
     * 创建一个vcsLib的配置文件
     */
    task vcsLibPublishInit(group: "vcsLib") {
        doFirst {
            MavenConf.createConfFile(new File(projectDir, App.mavenConfFileName))
            App.logE("Please re-run the configuration Gradle Sync To take effect")
        }
    }
} else if (mavenConf.repoConfigs.size() > 0) {
    if (mavenConf.repoConfigs.size() > 1) {
//        ArrayList<Task> taskArrayList = new ArrayList<>()
        for (int i = 0; i < mavenConf.repoConfigs.size(); i++) {
            RepoConfig item = mavenConf.repoConfigs.get(i)
            /**
             * 用于发布版本时同步仓库信息
             */
            task("vcsLibPublishSync_\$$i", group: "vcsLib publish queue") {
                dependsOn(uploadArchives)
                doFirst {
                    App.logD("$name is starting...")
                    Repo repo = new RepoHelper(item).connectRepo()
                    if (repo != null) {
                        repo.upload()
                    }
                    App.logD("$name is completed")
                }
            }
            /**
             * 部署maven库
             * 先执行maven的uploadArchives
             */
            task("vcsLibPublish_\$$i", group: "vcsLib") {
                finalizedBy(tasks.findByName("vcsLibPublishSync_\$$i"))
                doFirst {
                    App.logD("$name is starting...")
                    configUploadArchives(mavenConf.mavenId, item)
                    Repo repo = new RepoHelper(item).connectRepo()
                    if (repo != null) {
                        repo.update()
                    }
                    App.logD("$name is completed")
                }
            }
//            taskArrayList.add(tasks.findByName("vcsLibPublish_\$$i"))
        }
//        /**
//         * 部署maven库
//         * 先执行maven的uploadArchives
//         */
//        task vcsLibPublish(group: "vcsLib") {
//            finalizedBy(taskArrayList)
//        }
    } else {
        RepoConfig item = mavenConf.repoConfigs.get(0) as RepoConfig
        configUploadArchives(mavenConf.mavenId, item)
        /**
         * 用于发布版本时同步仓库信息
         */
        task vcsLibPublishSync(group: "vcsLib publish queue") {
            doFirst {
                App.logD("$name is starting...")
                Repo repo = new RepoHelper(item).connectRepo()
                if (repo != null) {
                    repo.update()
                }
                App.logD("$name is completed")
            }
        }
        /**
         * 部署maven库
         * 先执行maven的uploadArchives
         */
        task vcsLibPublish(group: "vcsLib") {
            doFirst {
                App.logD("$name is starting...")
                Repo repo = new RepoHelper(item).connectRepo()
                if (repo != null) {
                    repo.upload()
                }
                App.logD("$name is completed")
            }
        }
        uploadArchives.dependsOn(vcsLibPublishSync)
        vcsLibPublish.dependsOn(uploadArchives)
    }
}
