/**
 * @param mavenId com.demo:demo123:0.0.1
 * @param outputDir file path
 */
project.ext.localMavenDeployerConfig = { String mavenId, String outputDir ->
    setLocalMavenDeployer(mavenId, outputDir)
}


/**
 *
 * @param mavenId       com.demo:demo123:0.0.1
 * @param outputDir     file path
 */
void setLocalMavenDeployer(String mavenId, String outputDir) {
    String[] mavenIdInfo = mavenId.split(":")
    if (mavenIdInfo.length != 3 || mavenIdInfo[0].length() == 0 || mavenIdInfo[1].length() == 0 || mavenIdInfo[2].length() == 0) {
        println("mavenId:$mavenId is wrong!")
        return
    }
    String mGroup = mavenIdInfo[0]
    String mArtifactId = mavenIdInfo[1]
    String mVersion = mavenIdInfo[2]
    println("localMavenDeployerConfig -> outputDir:${new File(outputDir).absolutePath}")
    if (!plugins.hasPlugin('maven'))
        apply plugin: 'maven'
    group mGroup
    version mVersion

    if (plugins.hasPlugin("com.android.library")) {//android
        if (tasks.findByName('sourcesJar') == null)
            task sourcesJar(type: Jar) {
                from android.sourceSets.main.java.srcDirs
                archiveClassifier = 'sources'
            }
        if (tasks.findByName('javadoc') == null)
            task javadoc(type: Javadoc) {
                if (JavaVersion.current().isJava9Compatible()) {
                    options.addBooleanOption('html5', true)
                }
                options.encoding = "UTF-8"
                source = android.sourceSets.main.java.srcDirs
                classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
            }
    } else if (plugins.hasPlugin("java-library")) {//java
        if (tasks.findByName('sourcesJar') == null)
            task sourcesJar(type: Jar) {
                from sourceSets.main.java.srcDirs
                archiveClassifier = 'sources'
            }
        if (tasks.findByName('javadoc') == null)
            task javadoc(type: Javadoc) {
                if (JavaVersion.current().isJava9Compatible()) {
                    options.addBooleanOption('html5', true)
                }
                options.encoding = "UTF-8"
                source = sourceSets.main.java.srcDirs
                classpath += project.files(getBootClasspath().join(File.pathSeparator))
            }
    }

    if (tasks.findByName('javadocJar') == null)
        task javadocJar(type: Jar, dependsOn: javadoc) {
            archiveClassifier = 'javadoc'
            from javadoc.destinationDir
        }

    artifacts {
        archives javadocJar
        archives sourcesJar
    }

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('encoding', 'UTF-8')
        options.addStringOption('charSet', 'UTF-8')
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: new File(outputDir).toURI())
                pom.version = mVersion
                pom.artifactId = mArtifactId
            }
        }
    }
}
