import groovy.json.JsonBuilder
import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import groovy.json.JsonSlurperClassic

//************vcsLib gradle脚本版（使用本地的svn/git命令）*************************//
/**
 *
 */
final class AppConfig {
    static final boolean isDebug=true
    static final String confFileName = "vcsLib.json"
    /**
     * 软件存储主目录
     */
    static final File vcsLibHome = new File(System.getProperty("user.home"), ".vcsLib")
    static {
        if (vcsLibHome.exists() && vcsLibHome.isFile()) {
            vcsLibHome.delete()
        }
        if (!vcsLibHome.exists()) {
            vcsLibHome.mkdir()
        }
    }
}

class RepoConfig {
    String uri = ""
    String user = ""
    String passwd = ""

    static File outDir(String uri) {
        if (AppConfig.isDebug){
            return new File(AppConfig.vcsLibHome,
                    "debug."+URLEncoder.encode(uri, "utf-8"))
        }else {
            return new File(AppConfig.vcsLibHome,
                    URLEncoder.encode(uri, "utf-8"))
        }
    }

    static HashMap<String, RepoConfig> loadConfs(File file) {
        if (file.exists()) {
            HashMap result = new HashMap<String, RepoConfig>()
            ArrayList<HashMap> repoConfs = new JsonSlurperClassic().parse(file)
            repoConfs.each { conf ->
                RepoConfig repoConfig = new RepoConfig()
                repoConfig.user = conf.user
                repoConfig.passwd = conf.passwd
                repoConfig.uri = conf.uri
                if (!repoConfig.uri.isEmpty()) {
                    result.put(repoConfig.uri, repoConfig)
                }
            }
            return result
        } else {
            file.createNewFile()
            file.write(JsonOutput.prettyPrint(JsonOutput.toJson([[uri: "", user: "", passwd: "",]])))
            return new HashMap<String, RepoConfig>()
        }
    }
}


abstract class Repo {
    final RepoConfig repoConfig
    final File outDir
    final File updateTagFile
    /**
     * 在12小时以内不再进行重复的更新操作
     */
    final long limitTime = 1000 * 60 * 60 * 12

    Repo(RepoConfig repoConfig) {
        this.repoConfig = repoConfig
        outDir = RepoConfig.outDir(repoConfig.uri)
        updateTagFile = new File(outDir.parent, ".${outDir.name}")
    }

    abstract boolean hasCheckout()

    abstract void update()

    abstract void upload()

}

class RepoGit extends Repo {

    RepoGit(RepoConfig repoConfig) {
        super(repoConfig)
    }

    @Override
    boolean hasCheckout() {
        return false
    }

    @Override
    void update() {
    }

    @Override
    void upload() {

    }
}
/**
 * 參考：https://www.cnblogs.com/hk315523748/p/6178273.html
 */
class RepoSvn extends Repo {

    RepoSvn(RepoConfig repoConfig) {
        super(repoConfig)
    }

    @Override
    boolean hasCheckout() {
        return false
    }

    @Override
    void update() {
        if(hasCheckout()){
            exec {
                workingDir(outDir)
                args("svn","update")

            }
        }else {
            exec {
                workingDir(outDir)
                args("svn","checkout",repoConfig.uri,outDir.absolutePath,"--username",repoConfig.user,"--password",repoConfig.passwd)
            }
        }

    }

    @Override
    void upload() {

    }
}

buildscript.dependencies {

}

task vcsLibUpdate(group: "vcsLib") {
    doFirst {

        RepoConfig.loadConfs(new File(rootDir, AppConfig.confFileName))
        println("vcsLibUpdate is running")
    }
}




