/**
 *
 */
project.ext.vcsMavenDeployer = {
        /**
         * XXX.XXX.XXX
         */
    String mGroup,
    /**
     * project name or custom name
     */
    String mArtifactId,
    /**
     * 0.0.1
     */
    String mVersion,
    /**
     * git or svn uri
     */
    String vcsUri,
    /**
     * only support absolutePath
     */
    String vcsLibHome = new File(System.getProperty("user.home"), ".vcsLib").absolutePath ->
        File outputDir=new File(new File(vcsLibHome), URLEncoder.encode(vcsUri, "utf-8"))
        println("> vcsLib :${project.name}:vcsLibHome is $vcsLibHome")
        String vcsType=""
        if (vcsUri.startsWith("svn://")) {//svn uri
            vcsType="svn"
        } else if (vcsUri.startsWith("git@") || vcsUri.endsWith(".git")) {//git uri
            vcsType="git"
        }
        task vcsLibUpdate{
            group 'vcsLib'
            doFirst {
                if (vcsType.equals("git")){
                    if (new File(outputDir,".git").exists()){//git pull
                        println("git pull")
                        exec {
                            workingDir(outputDir)
                            standardOutput System.out
                            errorOutput System.err
                            commandLine "git","pull"
                        }
                    }else {//git clone
                        if (outputDir.exists()){
                            outputDir.delete()
                        }
                        println("git clone $vcsUri ${outputDir.name}")
                        ProcessBuilder processBuilder=new ProcessBuilder("git","clone",vcsUri,outputDir.name)
                        processBuilder.directory(new File(vcsLibHome))
                        Process p=processBuilder.start()
                        BufferedReader br=new BufferedReader(new InputStreamReader(p.getInputStream()))
                        String line=null;
                        while((line=br.readLine())!=null){
                            System.out.println(line);
                        }
                        int result=p.waitFor();
                        System.out.println(result);
                        exec {
                            workingDir(vcsLibHome)
//                            standardOutput System.out
//                            errorOutput System.err
                            commandLine "cmd","git","clone",vcsUri,outputDir.name
                            standardOutput.write("965791593@qq.com\n".getBytes())
                            standardOutput.flush()
                            standardOutput.write("123456\n".getBytes())
                            standardOutput.flush()
                        }
                        println("git clone completed!")
                    }
                }else if (vcsType.equals("svn")){

                }
            }
        }
        task vcsLibCheck {
            group 'vcsLib'
            doFirst {

            }
        }
        uploadArchives.dependsOn vcsLibCheck

        boolean isAndroidLibrary = plugins.hasPlugin('com.android.library')
        if (!plugins.hasPlugin('maven'))
            apply plugin: 'maven'
        group mGroup
        version mVersion


        Set<File> srcFiles = isAndroidLibrary ? android.sourceSets.main.java.srcDirs : sourceSets.main.java.srcDirs

        if (tasks.findByName('sourcesJar') == null)
            task sourcesJar(type: Jar) {
                from srcFiles
                classifier = 'sources'
            }

        if (tasks.findByName('javadoc') == null)
            task javadoc(type: Javadoc) {
                options.encoding = "UTF-8"
                source = srcFiles
                if (isAndroidLibrary) {
                    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
                } else {
                    classpath += project.files(getBootClasspath().join(File.pathSeparator))
                }
            }
        if (tasks.findByName('javadocJar') == null)
            task javadocJar(type: Jar, dependsOn: javadoc) {
                classifier = 'javadoc'
                from javadoc.destinationDir
            }

        artifacts {
            archives javadocJar
            archives sourcesJar
        }


        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
            options.addStringOption('encoding', 'UTF-8')
            options.addStringOption('charSet', 'UTF-8')
        }

        uploadArchives {
            repositories {
                mavenDeployer {
                    repository(url: outputDir.toURI())
                }
            }
        }
}




